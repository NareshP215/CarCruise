<% layout("/layouts/boilerplate") -%>

<div class="row mt-3">
    <div class="col-8 offset-2">
        <h3>Edit your Listing </h3>
        <form method="post" action="/listings/<%=listing._id%>?_method=put"
            novalidate class="needs-validation" enctype="multipart/form-data">

            <div class="mb-3">
                <label for="title" class="form-label">Title</label>
                <input name="listing[title]" value="<%= listing.title %>"
                    type="text" class="form-control" required>
                <div class="valid-feedback"> Title looks good!</div>
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea name="listing[description]"
                    class="form-control"
                    required><%= listing.description%></textarea>
                <div class="invalid-feedback">Please enter a short
                    description</div>
            </div>

            <div class="mb-3">
                Original Listing Image <br>
                <img src="<%=orginalImageUrl%>">
            </div>

            <div class="mb-3">
                <label for="image" class="form-label">Upload New Image</label>
                <input name="listing[image]"
                    type="file" class="form-control">
            </div>

            <div class="row">
                <div class="mb-3 col-md-4">
                    <label for="price" class="form-label">Price</label>
                    <input name="listing[price]" value="<%= listing.price %>"
                        type="number" class="form-control" required>
                    <div class="invalid-feedback">Price should be valid</div>
                </div>

                <div class="mb-3 col-md-8">
                    <label for="country" class="form-label">Country</label>
                    <input name="listing[country]" id="country"
                        value="<%= listing.country %>"
                        type="text" class="form-control" required>
                    <div class="invalid-feedback">Country name should be
                        valid</div>
                </div>
            </div>

            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <input name="listing[location]" id="location" value="<%= listing.location %>"
                    type="text" class="form-control" required>
                <div class="invalid-feedback">Location should be valid</div>
            </div>

            <!-- Hidden inputs for coordinates -->
            <input type="hidden" name="listing[latitude]" id="latitude" value="<%= listing.geometry ? listing.geometry.coordinates[1] : '' %>">
            <input type="hidden" name="listing[longitude]" id="longitude" value="<%= listing.geometry ? listing.geometry.coordinates[0] : '' %>">

            <div class="mb-3">
                <h3>Where you'll be</h3>
                <div class="map-container">
                    <div id="map" style="height: 400px; width: 100%;"></div>
                    <div class="map-instructions">
                        <i class="fas fa-info-circle"></i> Drag the marker to set the exact location.
                    </div>
                </div>
            </div>

            <style>
                .tag-group { display:flex; flex-wrap: wrap; gap: .5rem; }
                .tag-pill { border-radius: 999px; }
            </style>
            <div class="mb-3">
                <label class="form-label d-flex justify-content-between align-items-center">
                    <span>Categories</span>
                    <small class="text-muted"><span id="tagCount">0</span>/4 selected</small>
                </label>
                <div class="tag-group" aria-label="Category selection">
                    <% const availableTags = ['Premium','Luxurious','Budget','Family','SUV','Sedan','Hatchback','Electric','Manual','Automatic']; %>
                    <% availableTags.forEach(tag => { const id = `tag-${tag}`; const checked = (listing.tags || []).includes(tag) ? 'checked' : '' %>
                        <input type="checkbox" class="btn-check tag-checkbox" name="listing[tags][]" value="<%= tag %>" id="<%= id %>" <%= checked %> autocomplete="off">
                        <label class="btn btn-outline-dark btn-sm tag-pill" for="<%= id %>"><%= tag %></label>
                    <% }) %>
                </div>
                <small class="text-muted d-block mt-1">Choose up to 4 categories.</small>
            </div>

            <button class="btn edit-btn mt-3">Update Listing</button>
        </form>
        <br> <br>
    </div>
</div>

<script>
// Initialize map with existing coordinates for edit form
document.addEventListener('DOMContentLoaded', function() {
    if (document.getElementById('map')) {
        // Get existing coordinates or use default
        const lat = parseFloat(document.getElementById('latitude').value) || 20.5937;
        const lng = parseFloat(document.getElementById('longitude').value) || 78.9629;
        
        // Initialize map with existing coordinates
        const map = L.map('map').setView([lat, lng], 13);
        
        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

        const marker = L.marker([lat, lng]).addTo(map);
        marker.dragging.enable();

        // Handle marker drag events
        marker.on('dragend', async function(e) {
            const newLat = e.target.getLatLng().lat;
            const newLng = e.target.getLatLng().lng;
            
            // Update coordinates
            document.getElementById('latitude').value = newLat;
            document.getElementById('longitude').value = newLng;
            
            // Reverse geocode and update popup
            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${newLat}&lon=${newLng}&zoom=18&addressdetails=1`);
                const data = await response.json();
                
                if (data) {
                    const popupContent = `
                        <div>
                            <strong>üìç Selected Location</strong><hr>
                            <p>${data.display_name}</p>
                        </div>
                    `;
                    marker.bindPopup(popupContent).openPopup();
                    
                    // Update form fields
                    const address = data.address;
                    let locationParts = [];
                    if (address.city) locationParts.push(address.city);
                    if (address.state) locationParts.push(address.state);
                    if (address.county) locationParts.push(address.county);
                    if (locationParts.length === 0 && data.display_name) {
                        locationParts = data.display_name.split(',').slice(0, 2);
                    }
                    
                    document.getElementById('location').value = locationParts.join(', ');
                    document.getElementById('country').value = address.country || '';
                }
            } catch (error) {
                console.error('Reverse geocoding error:', error);
            }
        });

        // Handle geocode button click
        document.getElementById('geocodeBtn').addEventListener('click', async function() {
            const street = document.getElementById('street').value || '';
            const city = document.getElementById('city').value || '';
            const country = document.getElementById('country').value || '';
            
            if (!street && !city && !country) {
                alert('Please enter at least one address component');
                return;
            }
            
            const address = [street, city, country].filter(Boolean).join(', ');
            
            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}&limit=1`);
                const data = await response.json();
                
                if (data.length > 0) {
                    const geocodedData = data[0];
                    const lat = parseFloat(geocodedData.lat);
                    const lng = parseFloat(geocodedData.lon);
                    
                    // Update map and marker
                    map.setView([lat, lng], 13);
                    marker.setLatLng([lat, lng]);
                    
                    // Update coordinates
                    document.getElementById('latitude').value = lat;
                    document.getElementById('longitude').value = lng;
                    
                    // Update popup
                    const popupContent = `
                        <div>
                            <strong>üìç Geocoded Location</strong><hr>
                            <p>${geocodedData.display_name}</p>
                        </div>
                    `;
                    marker.bindPopup(popupContent).openPopup();
                    
                    // Update form fields
                    const address = geocodedData.address;
                    let locationParts = [];
                    if (address.city) locationParts.push(address.city);
                    if (address.state) locationParts.push(address.state);
                    if (address.county) locationParts.push(address.county);
                    if (locationParts.length === 0 && geocodedData.display_name) {
                        locationParts = geocodedData.display_name.split(',').slice(0, 2);
                    }
                    
                    document.getElementById('location').value = locationParts.join(', ');
                    document.getElementById('country').value = address.country || '';
                } else {
                    alert('Could not geocode the provided address. Please try a different address or drag the marker manually.');
                }
            } catch (error) {
                console.error('Geocoding error:', error);
                alert('Error geocoding address. Please try again.');
            }
        });
    }
});
</script>
<script>
// Limit category selection to max 4 and show live count
document.addEventListener('DOMContentLoaded', function() {
    const checkboxes = document.querySelectorAll('.tag-checkbox');
    const counterEl = document.getElementById('tagCount');
    const max = 4;
    const updateCount = () => {
        const count = Array.from(checkboxes).filter(c => c.checked).length;
        if (counterEl) counterEl.textContent = count.toString();
    };
    checkboxes.forEach(cb => {
        cb.addEventListener('change', function() {
            const selected = Array.from(checkboxes).filter(c => c.checked);
            if (selected.length > max) {
                this.checked = false;
                return;
            }
            updateCount();
        });
    });
    updateCount();
});
</script>
